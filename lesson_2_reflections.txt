What happens when you initialize a repository? Why do you need to do it?

When I initialize a repository git starts tracking its contents and whenever I submit a commit some newer version of a project/directory is being added to a history of changes. Therefore, I can quickly revert state of project to other specified state in a past.


How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is a place where we put some parts of our change (some files, etc.) in order not to make a single huge commit. It can be used in cases when there are multiple changes in many files.


How can you use the staging area to make sure you have one commit per logical change?

If you start coding again after longer break you may not be aware that there have been significant changes you made last time. To avoid it, you may want to add to commit only this file that was modified just before.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches might be useful when you decide to take some challenges, when you want to try something that is experimental and don't want to disturb therefore the normal master branch. It might be useful when the application uses different code for different devices or for different language sets.


How do the diagrams help you visualize the branch structure?

Diagrams clearly show at which point the new branch was created and give brief overview of the whole tree of application.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is one common branch with all changes made in both branches. We represent it this way because in fact it is merging two so far independent branches into one new branch.